name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, '3.10', '3.11']

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov flake8
    
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Test with pytest
      run: |
        pytest --cov=. --cov-report=xml
      env:
        DEFAULT_API_KEY: test-key-12345
        REQUIRE_API_KEY: true
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Run security scan
      uses: securecodewarrior/github-action-add-sarif@v1
      with:
        sarif-file: 'security-scan-results.sarif'
    
    - name: Run Bandit Security Scan
      run: |
        pip install bandit
        bandit -r . -f json -o bandit-report.json || true
    
    - name: Upload Bandit scan results
      uses: actions/upload-artifact@v3
      with:
        name: bandit-results
        path: bandit-report.json

  docker-build:
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Build Docker image
      run: |
        docker build -t unified-scraper-api:latest .
    
    - name: Test Docker image
      run: |
        docker run -d -p 5000:5000 -e DEFAULT_API_KEY=test-key-12345 --name test-container unified-scraper-api:latest
        sleep 10
        curl -f http://localhost:5000/health || exit 1
        docker stop test-container
        docker rm test-container
    
    - name: Login to Docker Hub
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Push to Docker Hub
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      run: |
        docker tag unified-scraper-api:latest ${{ secrets.DOCKER_USERNAME }}/unified-scraper-api:latest
        docker tag unified-scraper-api:latest ${{ secrets.DOCKER_USERNAME }}/unified-scraper-api:${{ github.sha }}
        docker push ${{ secrets.DOCKER_USERNAME }}/unified-scraper-api:latest
        docker push ${{ secrets.DOCKER_USERNAME }}/unified-scraper-api:${{ github.sha }}

  deploy:
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Deploy to production
      run: |
        echo "Deployment step would go here"
        # Add your deployment commands here
        # For example: kubectl apply -f k8s/ or ssh to server and pull latest image